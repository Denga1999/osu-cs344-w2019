#!/bin/bash
#
# matrix
#
# Phi Luu
#
# Oregon State University
# CS 344_001_W2019 Operating Systems 1
# Program 1: Matrices

# Validates a matrix by making sure all rows have the same number of elements
# and all elements are integers.
#
# SYNOPSIS
#   is_int_matrix matrix
#
# ARGUMENTS
#   matrix - a string of EOL-separated rows (to be validated)
#
# RETURNS
#   0 - if the  matrix  argument is a valid matrix
#   1 - otherwise
is_int_matrix() {
  # ensure there is a non-empty and valid filename to check
  if [[ "$#" -ne 1 ]] || [[ -z "$1" ]] || [[ ! -f "$1" ]]; then
    return 1
  fi

  # count the number of rows
  local num_rows="$(wc -l < "$1")"
  # count the number of elements
  local num_elems="$(wc -w < "$1")"

  # #elements must be divisible by #rows
  if [[ "$(expr ${num_elems} % ${num_rows})" -ne 0 ]]; then
    return 1
  fi

  # TODO: Check integers

  return 0
}

# Prints the dimensions of the matrix as the number of rows, followed by a
# space, then the number of columns.
#
# SYNOPSIS
#   dims [matrix]
#
# ARGUMENTS
#   matrix - a string of EOL-separated rows, each contains an equal number of
# tab-separated integers.
#   If no arguments were provided, prompts the user to enter the matrix
#
# RETURNS
#   None
dims() {
  # ensure there is at most 1 argument
  if [[ "$#" -gt 1 ]]; then
    echo 'Usage: ./matrix dims [matrix]' >&2
    return 1
  # if using file, ensure the file exists
  elif [[ "$#" -eq 1 ]] && [[ ! -f "$1" ]]; then
    echo 'Could not read file' >&2
    return 1
  # if no arguments provided
  # else
  #   echo 'No arguments provided. Please use stdin'
  #   use stdin
  #   while read line; do
  #     echo "Line is = ${line}"
  #   done < "${1:-/dev/stdin}"
  fi

  # validate the matrix
  if ! is_int_matrix "$1"; then
    echo 'Invalid matrix' >&2
    return 1
  fi

  # count the number of rows
  local num_rows="$(wc -l < "$1")"
  # count the number of elements
  local num_elems="$(wc -w < "$1")"
  # count the number of columns
  local num_cols="$(expr ${num_elems} / ${num_rows})"

  echo "${num_rows} ${num_cols}"
}

# TODO: validate command line arguments and use  $1 "${@:2}"  instead of using case
case "$1" in
  dims)
    dims "${@:2}"
    # echo "dims() returned $?"
    ;;
  *)
    echo 'Invalid operation' >&2
esac
